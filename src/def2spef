#!/usr/bin/env python

import sys
import datetime

def checkversion():
    #refuse the used python version from the beginning
    if (sys.version_info > (3, 0)):
        print('The Program doesnt support Python 3')
        exit(1)

#function responsible for the actual parsing and generation of spef
def generateSpef(deffile, leffile, libfile,speffile):
    checkversion()
    cell_pins={}   #dictionary to containg cell name with its associated pins properties (i.e. capacitance or direction)
    flag_inside_pin=0

    #read cell_names and save ports names with their direction from lib file
    with open(libfile,'r') as libf:
        for line in libf:
            try:
                first_word=line.split()[0]
                if(flag_inside_pin):
                    #then insied specific pin in the cell
                    if first_word=='direction':
                        try:
                            direction=line.split()[2].lower()   #third word usually
                            if(';'in direction):
                                direction=direction.split(';')[0]
                            if direction=='input':
                                cell_pins[cell_name][pin_name].append('I')
                            else:
                                cell_pins[cell_name][pin_name].append('O')
                        except:
                            pass
                    #(TODO Areeg & Samanoudy): some pins in cells in NangateOpenCellLibrary only have max_cap
                    #(TODO Areeg & Samanoudy): without cap should it be included?
                    if first_word=='capacitance':
                        try:
                            capacitance=line.split()[2]   #third word usually
                            if(';'in capacitance):
                                capacitance=capacitance.split(';')[0]
                            cell_pins[cell_name][pin_name].append(capacitance)
                            flag_inside_pin=0
                        except:
                            pass
                #or inside the cell but didnt find the pin yet
                elif('pin' in first_word and '('in line and ')' in line):
                    try:
                        pin_name=line[line.find("(")+1:line.find(")")]
                        cell_pins[cell_name][pin_name]=[] #add new cell into our dictionary
                        flag_inside_pin=1
                    except:
                        print('expected pin (pin_name) inside lib file')
                        exit(1)
                if(first_word=='cell'):
                    #then inside a cell
                    flag_inside_pin=0
                    try:
                        cell_name = line[line.find("(")+1:line.find(")")]
                        cell_pins[cell_name]={} #add new cell into our dictionary
                    except:
                        print('expected cell(cell_name) inside lib file')
                        exit(1)
            except:
                pass


    flag_in_nets_section=0  #used to determine whether the current section is nets section
    flag_inside_connection_net=0  #used to determine wthether we are inside a specific net
    nets_section_string=""  #we shall add this to string_to_write when writing to our beloved file

    #(TODO Mariam): I assume I have sth like that for now
    ports_direction={'a<0>':'I','y<1>':'O', 'b<0>':'I','sel<0>':'I','c<1>':'I','c<0>':'I', 'y<0>':'O',
                     'a<1>':'I','b<1>':'I','sel<1>':'I','d<0>':'I','d<1>':'I'}

    #start reading from the def file and get what we need
    with open(deffile, 'r') as df:
        for line in df:
            try:
                first_word= line.split()[0]
                #get design name
                if(first_word=='DESIGN'):
                    try:
                        design_name=line.split()[1]
                    except:
                        pass
                #get DIVIDERCHAR
                if(first_word=='DIVIDERCHAR'):
                    try:
                        DIVIDERCHAR=line.split()[1][1:-1]
                    except:
                        pass
                #get BUSBITCHARS
                if(first_word=='BUSBITCHARS'):
                    try:
                        BUSBITCHAR=line.split()[1][1:-1]
                    except:
                        pass
                #get the nets section here
                if(first_word=='END'):
                    #done with nets section
                    try:
                        second_word=line.split()[1]
                        if(second_word=='NETS'):
                            flag_in_nets_section=0
                            flag_inside_connection_net=0
                    except:
                        pass
                if(flag_in_nets_section and flag_inside_connection_net):
                    #we get here to get conenctions for current net
                    try:
                        #know is it a port or internal connection
                        if 'PIN' in line.split():
                            cell_name_index=line.split().index('PIN')
                            pin_name=line.split()[cell_name_index+1]
                            nets_section_string+="*P "+pin_name+" "+\
                                ports_direction[pin_name]+"\n"
                        elif '(' in line.split():
                            #get the location of '(' if it exists
                            cell_name=line.split()[line.split().index('(')+1]
                            pin_name= line.split()[line.split().index('(')+2]
                            nets_section_string+="*I "+cell_name+":"+pin_name+" "
                            for k in cell_pins.keys():
                                if k in cell_name:
                                    cell_name=str(k)
                                    break
                            direction=cell_pins[cell_name][pin_name][0]
                            if direction== 'I':
                                #then get capacitance of input pin
                                capacitance=cell_pins[cell_name][pin_name][1]
                                nets_section_string+=direction+" *L "+capacitance+"\n"
                            else:
                                #get the name only
                                nets_section_string+=direction+" *D "+cell_name+"\n"
                        if ';' in line.split():
                            #we are done with this net
                            flag_inside_connection_net=0
                            nets_section_string+="*CAP\n*RES\n*END\n\n"
                    except:
                        pass
                elif(flag_in_nets_section and not flag_inside_connection_net):
                    #we get here only to get the current net name
                    try:
                        second_word=line.split()[1]
                        currentNet=second_word if first_word =='-' else first_word #netname
                        # (TODO Adbo): here we should add the name map instead of the actal net name
                        # (TODO Areeg & Samanoudy): also we want to add the total capacitance field at the end of the line
                        #i.e. currentNet_name_map= name_maps_dict[currentNet]
                        total_capacitance_for_net=""
                        nets_section_string+="*D_NET "+currentNet+" "+str(total_capacitance_for_net)+\
                            "\n*CONN\n"
                        flag_inside_connection_net=1
                    except:
                        pass
                if(first_word=='NETS'):
                    flag_in_nets_section=1
                    flag_inside_connection_net=0

            except:
                pass

    #write to the SPEF file
    #we first prepare a list with all the lines we want to inset then we open the file and insert all at once
    all_words=[]

    #Header Section : header_def
    currenttime= datetime.datetime.now()
    string_to_write='*SPEF "IEEE 1481-2009"\n*DESIGN "'+design_name+'"\n*DATE "'+str(currenttime)+'"\n*VENDOR "AUC_STUDENTS"'+\
        '\n*PROGRAM "Def2Spef_Converter"\n*VERSION "0.0"\n*DESIGN_FLOW "PROJECT2_FLOW"\n*DIVIDER '+DIVIDERCHAR+'\n*DELIMITER :\n*BUS_DELIMITER'+\
                    ' '+BUSBITCHAR+'\n*T_UNIT 1 PS\n*C_UNIT 1 FF\n*R_UNIT 1 KOHM\n*L_UNIT 1 UH\n'
    all_words.append(string_to_write)


    #Name map definition : [name_map]
    string_to_write="*NAME_MAP\n"
    all_words.append(string_to_write)


    #Power & Ground Nets definition : [power_def]

    #External definition : [external_def]

    #Hierarchical SPEF (entities) definition : [define_def]

    #Process and temperature variation definition : [variation_def]

    #Internal definition : internal_def
    string_to_write=nets_section_string
    all_words.append(string_to_write)

    #write everything here
    with open(speffile, 'w') as f:
        for i in all_words:
            f.write(i+'\n')

def main():

    #get the argumnents from CLI
    if len(sys.argv) <5 and len(sys.argv)>=1:
        if(len(sys.argv) ==1):
            print('usage is python def2spef [deffile] [libraryfile] [leffile] [speffile]\ndef2spef -help for additional options')
            exit(1)
        elif(sys.argv[1]=='-help'):
            print('usage is python def2spef [deffile] [libraryfile] [leffile] [speffile]')
            exit(0)
        else:
            print('usage is python def2spef [deffile] [libraryfile] [leffile] [speffile]\ndef2spef -help for additional options')
            exit(1)

    deffile=sys.argv[1]
    libfile=sys.argv[2]
    leffile=sys.argv[3]
    speffile=sys.argv[4]

    generateSpef(deffile,leffile,libfile,speffile)


if __name__== "__main__":
    main()
